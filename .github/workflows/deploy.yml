# PURPOSE: This GitHub Actions workflow automates the deployment of the application to a remote server (Droplet).
# It pulls the latest code from the `main` branch, rebuilds the Docker containers, and restarts the application.
# This ensures that the deployed application is always up-to-date with the latest changes.

name: Deploy to Droplet
# WHAT: Defines the name of the workflow.
# WHY: The name helps identify this workflow in the GitHub Actions interface.
# HOW: The `name` field specifies the workflow's name.

on:
  push:
    branches:
      - main
# WHAT: Specifies the event that triggers the workflow.
# WHY: The workflow runs whenever code is pushed to the `main` branch.
# HOW: The `on.push.branches` field listens for pushes to the specified branch.

jobs:
  deploy:
    runs-on: ubuntu-latest
    # WHAT: Defines a job named `deploy` that runs on the latest Ubuntu environment.
    # WHY: The job needs a Linux environment to execute deployment commands.
    # HOW: The `runs-on` field specifies the operating system for the job.

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        # WHAT: Checks out the repository code into the workflow's runner.
        # WHY: The workflow needs access to the repository files to deploy the application.
        # HOW: The `actions/checkout` action fetches the repository's code.

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DO_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.DO_HOST }} >> ~/.ssh/known_hosts
        # WHAT: Sets up an SSH key for secure communication with the remote server.
        # WHY: SSH is required to securely connect to the remote server for deployment.
        # HOW: The SSH private key is retrieved from GitHub Secrets and saved to `~/.ssh/id_rsa`.
        #      The `ssh-keyscan` command adds the server's host key to the known hosts file to prevent SSH warnings.

      - name: Deploy with Docker
        run: |
          ssh ${{ secrets.DO_USER }}@${{ secrets.DO_HOST }} << 'EOF'
            cd /root/code-app
            git pull origin main
            docker compose down
            docker compose build --no-cache
            docker compose up -d
          EOF
        # WHAT: Connects to the remote server via SSH and deploys the application using Docker Compose.
        # WHY: Automates the deployment process, ensuring the latest code is pulled, containers are rebuilt, and the application is restarted.
        # HOW: The `ssh` command connects to the server using credentials from GitHub Secrets.
        #      Inside the SSH session:
        #      - `cd /root/code-app`: Navigates to the application directory.
        #      - `git pull origin main`: Pulls the latest code from the `main` branch.
        #      - `docker compose down`: Stops and removes the running containers.
        #      - `docker compose build --no-cache`: Rebuilds the containers without using cached layers.
        #      - `docker compose up -d`: Starts the containers in detached mode.
